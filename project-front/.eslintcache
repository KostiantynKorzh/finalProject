[{"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/auth.service.js":"1","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/admin.service.js":"2","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/user.service.js":"3","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/BoardUser.js":"4","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/store.js":"5","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Home.js":"6","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Signup.js":"7","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/index.js":"8","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/types.js":"9","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/admin.js":"10","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Login.js":"11","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/reportWebVitals.js":"12","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/utils/history.js":"13","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/App.js":"14","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/auth-header.js":"15","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/modal/CreateTestModal.js":"16","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/message.js":"17","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/admin.js":"18","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/modal/AddTestsToUsersModal.js":"19","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/auth.js":"20","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CreateTestInit.js":"21","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Test.js":"22","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/QuestionCard.js":"23","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CreateTest.js":"24","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CreateTestQuestionCard.js":"25","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/test.js":"26","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Header.js":"27","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/auth.js":"28","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/index.js":"29","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/message.js":"30","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/test.js":"31","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/test.service.js":"32","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/lang.service.js":"33","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Profile.js":"34","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CompleteTest.js":"35","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Timer.js":"36","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/AdminUsers.js":"37","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/AddTestsToUser.js":"38","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/EditUser.js":"39","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/AdminTests.js":"40","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/UserPassedTests.js":"41","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/UserRequiredTests.js":"42"},{"size":680,"mtime":1611264415706,"results":"43","hashOfConfig":"44"},{"size":2021,"mtime":1611311150938,"results":"45","hashOfConfig":"44"},{"size":900,"mtime":1611131631457,"results":"46","hashOfConfig":"44"},{"size":3869,"mtime":1611296238827,"results":"47","hashOfConfig":"44"},{"size":257,"mtime":1610654933550,"results":"48","hashOfConfig":"44"},{"size":1008,"mtime":1611302519514,"results":"49","hashOfConfig":"44"},{"size":6165,"mtime":1611245237142,"results":"50","hashOfConfig":"44"},{"size":197,"mtime":1610753434638,"results":"51","hashOfConfig":"44"},{"size":677,"mtime":1611222596233,"results":"52","hashOfConfig":"44"},{"size":700,"mtime":1611221647181,"results":"53","hashOfConfig":"44"},{"size":2232,"mtime":1611014175994,"results":"54","hashOfConfig":"44"},{"size":362,"mtime":1610714292427,"results":"55","hashOfConfig":"44"},{"size":95,"mtime":1610734757029,"results":"56","hashOfConfig":"44"},{"size":3280,"mtime":1611300969117,"results":"57","hashOfConfig":"44"},{"size":225,"mtime":1610751848593,"results":"58","hashOfConfig":"44"},{"size":1686,"mtime":1611089944647,"results":"59","hashOfConfig":"44"},{"size":225,"mtime":1610659655905,"results":"60","hashOfConfig":"44"},{"size":1791,"mtime":1611223079075,"results":"61","hashOfConfig":"44"},{"size":2172,"mtime":1611276317272,"results":"62","hashOfConfig":"44"},{"size":1145,"mtime":1610753335310,"results":"63","hashOfConfig":"44"},{"size":3685,"mtime":1611293510205,"results":"64","hashOfConfig":"44"},{"size":4622,"mtime":1611307145130,"results":"65","hashOfConfig":"44"},{"size":2339,"mtime":1611152725190,"results":"66","hashOfConfig":"44"},{"size":1342,"mtime":1611293675518,"results":"67","hashOfConfig":"44"},{"size":5949,"mtime":1611293909652,"results":"68","hashOfConfig":"44"},{"size":517,"mtime":1611224330495,"results":"69","hashOfConfig":"44"},{"size":4529,"mtime":1611296980995,"results":"70","hashOfConfig":"44"},{"size":1994,"mtime":1611232000650,"results":"71","hashOfConfig":"44"},{"size":691,"mtime":1611302681789,"results":"72","hashOfConfig":"44"},{"size":379,"mtime":1610653647209,"results":"73","hashOfConfig":"44"},{"size":1019,"mtime":1611223079063,"results":"74","hashOfConfig":"44"},{"size":508,"mtime":1611291626760,"results":"75","hashOfConfig":"44"},{"size":672,"mtime":1611275568340,"results":"76","hashOfConfig":"44"},{"size":1202,"mtime":1611129741877,"results":"77","hashOfConfig":"44"},{"size":254,"mtime":1611306170672,"results":"78","hashOfConfig":"44"},{"size":1946,"mtime":1611305799641,"results":"79","hashOfConfig":"44"},{"size":4075,"mtime":1611311623084,"results":"80","hashOfConfig":"44"},{"size":1682,"mtime":1611286990273,"results":"81","hashOfConfig":"44"},{"size":3183,"mtime":1611289363659,"results":"82","hashOfConfig":"44"},{"size":2832,"mtime":1611292108229,"results":"83","hashOfConfig":"44"},{"size":2124,"mtime":1611300919986,"results":"84","hashOfConfig":"44"},{"size":3046,"mtime":1611309164259,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"m9tu1l",{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"95"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"104"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"107"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"104"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"110"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"95"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"95"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"104"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"95"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"95"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/auth.service.js",["191"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/admin.service.js",["192"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/user.service.js",["193"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/BoardUser.js",["194","195","196","197","198","199"],"import React, {useState, useEffect} from \"react\";\n\nimport UserService from \"../services/user.service\";\nimport {useSelector} from \"react-redux\";\nimport {Button, Modal, Table} from \"react-bootstrap\";\nimport Header from \"./Header\";\nimport LangService from \"../services/lang.service\";\n\nconst BoardUser = (props) => {\n\n    const {user: currentUser} = useSelector((state) => state.auth);\n\n    const [content, setContent] = useState({\n        requiredTests: \"\",\n        passedTests: \"\",\n        pass: \"\",\n        take: \"\"\n    });\n\n    const [needRefresh, setNeedRefresh] = useState(false);\n\n    const [passedTests, setPassedTests] = useState([]);\n    const [requiredTests, setRequiredTests] = useState([]);\n\n    const lang = localStorage.getItem('lang');\n\n    useEffect(() => {\n        UserService.getRequiredTests(props.match.params.id).then(\n            (response) => {\n                console.log(response.data);\n                setRequiredTests(response.data);\n            });\n\n        UserService.getPassedTests(props.match.params.id).then(\n            (response) => {\n                console.log(response.data);\n                setPassedTests(response.data);\n            });\n\n        // getContent(lang);\n\n    }, []);\n\n    // React.useEffect(() => {\n    //     console.log(\"Effect\");\n    //     window.addEventListener('storage', () => {\n    //         console.log(\"Listener\");\n    //     });\n    //\n    //\n    // },[])\n\n    // useEffect(() => {\n    //     getContent(lang);\n    // }, [lang])\n\n    useEffect(() => {\n        UserService.getRequiredTests(props.match.params.id).then(\n            (response) => {\n                console.log(response.data);\n                setRequiredTests(response.data);\n            });\n\n        UserService.getPassedTests(props.match.params.id).then(\n            (response) => {\n                console.log(response.data);\n                setPassedTests(response.data);\n            });\n        // setNeedRefresh(false);\n    }, [needRefresh]);\n\n\n\n    const handlePass = (test) => {\n        UserService.passTest(props.match.params.id, test.id);\n        setNeedRefresh(true);\n        // setNeedRefresh(false);\n        // UserService.getRequiredTests(props.match.params.id).then(\n        //     (response) => {\n        //         console.log(response.data);\n        //         setRequiredTests(response.data);\n        //     });\n        //\n        // UserService.getPassedTests(props.match.params.id).then(\n        //     (response) => {\n        //         console.log(response.data);\n        //         setPassedTests(response.data);\n        //     });\n        console.log(test.id);\n    }\n\n    const handleTake = (test) => {\n        let path = `/user/${currentUser.id}/takeTest/${test.id}`;\n        props.history.push(path);\n        window.location.reload();\n    }\n\n    return (\n        <div>\n            <Header/>\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h1>{content.requiredTests}</h1>\n                    <Table>\n                        <tbody>\n                        {requiredTests.map(test =>\n                            <tr>\n                                <td>\n                                    <div>{test.title}</div>\n                                </td>\n                                <td><Button onClick={() => handleTake(test)}>{content.take}</Button></td>\n                                <td><Button onClick={() => handlePass(test)}>{content.pass}</Button></td>\n                            </tr>\n                        )}\n                        </tbody>\n                    </Table>\n                    <h1>{content.passedTests}</h1>\n                    <h3>{passedTests.map(test =>\n                        <div>{test.title}</div>\n                    )}</h3>\n                </header>\n            </div>\n        </div>\n    );\n};\nexport default BoardUser;",["200","201"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/store.js",[],["202","203"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Home.js",["204","205","206"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Signup.js",["207","208","209"],"import React, {useEffect, useRef, useState} from 'react';\nimport {Button, Form} from \"react-bootstrap\";\nimport {register} from \"../redux/actions/auth\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport validator from \"validator\";\nimport {setMessage} from \"../redux/actions/message\";\nimport Header from \"./Header\";\n\nconst Signup = (props) => {\n\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [successful, setSuccessful] = useState(true);\n\n    const [firstNameError, setFirstNameError] = useState(\"\");\n    const [lastNameError, setLastFirstNameError] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n\n    const [passwordError, setPasswordError] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    const [isValidated, setValidated] = useState(false);\n\n    const {message} = useSelector(state => state.message);\n\n    const dispatch = useDispatch();\n\n    const initialRender = useRef(true);\n\n    useEffect(() => {\n        if (!initialRender.current) {\n            if (successful) {\n                window.alert(message);\n            } else {\n                setEmailError(message);\n            }\n        }\n        initialRender.current = false;\n    }, [errorMessage, message, successful])\n\n    const onChangeFirstName = (e) => {\n        const firstName = e.target.value;\n        setFirstName(firstName);\n    };\n\n    const onChangeLastName = (e) => {\n        const lastName = e.target.value;\n        setLastName(lastName);\n    };\n\n    const onChangeEmail = (e) => {\n        const email = e.target.value;\n        setEmail(email);\n    };\n\n    const onChangePassword = (e) => {\n        const password = e.target.value;\n        setPassword(password);\n    };\n\n\n    const validate = (firstName, lastName, email, password) => {\n        let containsProblem = true;\n        if (!validator.isAlpha(firstName)) {\n            setFirstNameError(\"Invalid first name\");\n            containsProblem = false;\n        } else {\n            setFirstNameError(null);\n        }\n        if (!validator.isAlpha(lastName)) {\n            setLastFirstNameError(\"Invalid last name\");\n            containsProblem = false;\n        } else {\n            setLastFirstNameError(null);\n        }\n        if (!validator.isEmail(email)) {\n            setEmailError(\"Invalid email\");\n            containsProblem = false;\n        } else {\n            setEmailError(null);\n        }\n        if (password.length < 8) {\n            setPasswordError(\"Password should contains at least 8 characters\");\n            containsProblem = false;\n        } else {\n            setPasswordError(null);\n        }\n        return containsProblem;\n    }\n\n    const handleRegister = (e) => {\n        e.preventDefault();\n\n        setSuccessful(false);\n\n        if (validate(firstName, lastName, email, password)) {\n            dispatch(register(firstName, lastName, email, password)).then(() => {\n                    setSuccessful(true);\n                }\n            )\n                .catch((error) => {\n                    // console.log(\"message: \", message)\n                    setErrorMessage(error)\n                    // window.alert(error);\n                    // console.log(\"error: \", error)\n                    setSuccessful(false);\n                });\n        }\n\n    };\n\n\n    return (\n        <div>\n            <Header/>\n            <Form>\n                <Form.Group controlId=\"formFirstName\">\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control type=\"text\" name=\"firstName\" placeholder=\"First Name\"\n                                  onChange={onChangeFirstName}\n                                  isInvalid={!!firstNameError}\n                    />\n                    {firstNameError && (\n                        <Form.Control.Feedback type=\"invalid\">\n                            {firstNameError}\n                        </Form.Control.Feedback>\n                    )}\n                </Form.Group>\n\n                <Form.Group controlId=\"formLastName\">\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control type=\"text\" name=\"lastName\" placeholder=\"Last Name\"\n                                  onChange={onChangeLastName}\n                                  isInvalid={!!lastNameError}\n                    />\n                    {lastNameError && (\n                        <Form.Control.Feedback type=\"invalid\">\n                            {lastNameError}\n                        </Form.Control.Feedback>\n                    )}\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" name=\"email\" placeholder=\"Enter email\"\n                                  onChange={onChangeEmail}\n                                  isInvalid={!!emailError}\n                    />\n                    {emailError && (\n                        <Form.Control.Feedback type=\"invalid\">\n                            {emailError}\n                        </Form.Control.Feedback>\n                    )}\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" name=\"password\" placeholder=\"Password\"\n                                  isInvalid={!!passwordError}\n                                  onChange={onChangePassword}/>\n                    <Form.Control.Feedback type=\"invalid\"/>\n                    {passwordError && (\n                        <Form.Control.Feedback type=\"invalid\">\n                            {passwordError}\n                        </Form.Control.Feedback>\n                    )}\n                </Form.Group>\n\n                <Button variant=\"primary\" type=\"submit\"\n                        onClick={handleRegister}\n                >\n                    Register\n                </Button>\n            </Form>\n        </div>\n    );\n}\n\nexport default Signup;",["210","211"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/index.js",[],["212","213"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/types.js",[],["214","215"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/admin.js",["216"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Login.js",["217","218","219","220","221"],"import React, {useRef, useState} from 'react';\nimport {Button, Container, Form} from \"react-bootstrap\";\nimport {Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {login} from \"../redux/actions/auth\";\n\nconst Login = (props) => {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n    const {isLoggedIn} = useSelector(state => state.auth);\n    const {message} = useSelector(state => state.message);\n\n    const dispatch = useDispatch();\n\n    const onChangeEmail = (e) => {\n        const email = e.target.value;\n        setEmail(email);\n    };\n\n    const onChangePassword = (e) => {\n        const password = e.target.value;\n        setPassword(password);\n    };\n\n    const handleLogin = (e) => {\n        e.preventDefault();\n\n        setLoading(true);\n\n        // form.current.validateAll();\n\n        // if (checkBtn.current.context._errors.length === 0) {\n        dispatch(login(email, password))\n            .then(() => {\n                props.history.push(\"/home\");\n                window.location.reload();\n            })\n            .catch(() => {\n                setLoading(false);\n            });\n        // } else {\n        //     setLoading(false);\n        // }\n    };\n\n    // if (isLoggedIn) {\n    //     return <Redirect to=\"/home\"/>\n    // }\n\n    return (\n        <Container>\n            <Form>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control type=\"email\" placeholder=\"Enter email\"\n                                  onChange={onChangeEmail}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control type=\"password\" placeholder=\"Password\"\n                                  onChange={onChangePassword}/>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\"\n                        onClick={handleLogin}>\n                    Submit\n                </Button>\n            </Form>\n        </Container>\n    );\n}\n\nexport default Login;",["222","223"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/reportWebVitals.js",[],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/utils/history.js",[],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/App.js",["224","225","226","227","228","229"],"import React, {useEffect, useState} from \"react\";\nimport './App.css';\nimport Header from \"./component/Header\";\nimport Home from \"./component/Home\";\nimport {Router, Switch, Route, BrowserRouter} from \"react-router-dom\";\nimport Login from \"./component/Login\";\nimport Signup from \"./component/Signup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {clearMessage} from \"./redux/actions/message\";\nimport BoardUser from \"./component/BoardUser\";\nimport {history} from \"./utils/history\";\nimport {logout} from \"./redux/actions/auth\";\nimport Test from \"./component/Test\";\nimport CreateTestInit from \"./component/CreateTestInit\";\nimport Profile from \"./component/Profile\";\nimport CreateTest from \"./component/CreateTest\";\nimport AdminUsers from \"./component/AdminUsers\";\nimport AddTestsToUser from \"./component/AddTestsToUser\";\nimport EditUser from \"./component/EditUser\";\nimport AdminTests from \"./component/AdminTests\";\nimport UserPassedTests from \"./component/UserPassedTests\";\nimport UserRequiredTests from \"./component/UserRequiredTests\";\n\nfunction App() {\n\n    const [showAdminBoard, setShowAdminBoard] = useState(false);\n\n    const {user: currentUser} = useSelector((state) => state.auth);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        history.listen((location) => {\n            dispatch(clearMessage()); // clear message when changing location\n        });\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (currentUser) {\n            setShowAdminBoard(currentUser.roles.includes(\"ROLE_ADMIN\"));\n        }\n    }, [currentUser]);\n\n    const [lang, setLang] = useState(\"\");\n\n    useEffect(() => {\n        console.log(\"from App.js\", lang);\n    }, [lang]);\n\n    return (\n        <Router history={history}>\n            <Switch>\n                {/*<Route exact path={[\"/\", \"/home\"]} component={Home} />*/}\n                {/*<Route exact path=\"/login\" component={Login} />*/}\n                {/*<Route exact path=\"/signup\" component={Signup} />*/}\n\n                <Route exact path={[\"/\", \"/home\"]} component={Home}/>\n                <Route exact path=\"/login\" component={Login}/>\n                <Route exact path=\"/signup\" component={Signup}/>\n                <Route exact path=\"/profile\" component={Profile}/>\n                <Route exact path=\"/user/:id/takeTest/:testId\" component={Test}/>\n                <Route exct path=\"/user/:id/passedTests\" component={UserPassedTests}/>\n                <Route exct path=\"/user/:id/requiredTests\" component={UserRequiredTests}/>\n                <Route exact path=\"/admin/users\" component={AdminUsers}/>\n                <Route exact path=\"/admin/:id/addTests\" component={AddTestsToUser}/>\n                <Route exact path=\"/admin/editUser/:id\" component={EditUser}/>\n                <Route exact path=\"/admin/tests\" component={AdminTests}/>\n\n                <Route exact path=\"/admin/createTest\" component={CreateTestInit}/>\n                <Route exact path=\"/admin/createTest/:id\" component={CreateTest}/>\n                {/*<Route exact path=\"/admin/createTest\" component={CreateTestModal}/>*/}\n\n                {/*<Route path=\"/user\" component={BoardUser} />*/}\n                {/*<Route path=\"/admin\" component={BoardAdmin} />*/}\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/auth-header.js",[],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/modal/CreateTestModal.js",["230","231"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/message.js",[],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/admin.js",["232","233"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/modal/AddTestsToUsersModal.js",["234","235"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/auth.js",["236"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CreateTestInit.js",["237"],"import React, {useEffect, useState} from \"react\";\nimport {Jumbotron, Button, Form} from \"react-bootstrap\";\nimport Header from \"./Header\";\nimport AdminService from \"../services/admin.service\";\nimport {useSelector} from \"react-redux\";\n\nconst CreateTestInit = (props) => {\n\n    const [newTest, setNewTest] = useState({\n        title: \"\",\n        subject: \"MATH\",\n        difficulty: \"EASY\",\n        duration: 0\n    });\n\n    const [title, setTitle] = useState(\"\");\n    const [subject, setSubject] = useState(\"MATH\");\n    const [difficulty, setDifficulty] = useState(\"EASY\");\n    const [duration, setDuration] = useState(\"\");\n\n    useEffect(() => {\n        setNewTest({\n            title: title,\n            subject: subject,\n            difficulty: difficulty,\n            duration: duration,\n        });\n    }, [title, subject, difficulty, duration]);\n\n    const handleSubmit = () => {\n        console.log(newTest);\n\n        AdminService.createTest(newTest).then(\n            resp => {\n                console.log(resp.data);\n                props.history.push(\"/admin/createTest/\" + resp.data.id);\n                window.location.reload();\n            }\n        );\n\n\n    }\n\n    return (\n        <div>\n            <Header/>\n            <Jumbotron>\n                <Form>\n                    <Form.Group controlId=\"formTestTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type=\"text\" name=\"testTitle\"\n                                      onChange={(e) =>\n                                          setTitle(e.target.value)}/>\n                    </Form.Group>\n                    <Form.Group controlId=\"formTestSubject\">\n                        <Form.Label>Subject</Form.Label>\n                        <Form.Control as=\"select\" type=\"text\" name=\"testSubject\"\n                                      onChange={(e) => {\n                                          console.log(e.target.value);\n\n                                          setSubject(e.target.value)\n                                      }}\n                                      defaultValue=\"MATH\"\n                        >\n                            <option value=\"MATH\">MATH</option>\n                            <option value=\"ENGLISH\">ENGLISH</option>\n                        </Form.Control>\n                        <Form.Group controlId=\"formTestDifficulty\">\n                            <Form.Label>Difficulty</Form.Label>\n                            <Form.Control as=\"select\" type=\"text\" name=\"testDifficulty\"\n                                          onChange={(e) => {\n                                              console.log(e.target.value);\n                                              setDifficulty(e.target.value);\n                                          }}\n                                          defaultValue=\"EASY\"\n                            >\n                                <option value=\"EASY\">EASY</option>\n                                <option value=\"MEDIUM\">MEDIUM</option>\n                                <option value=\"HARD\">HARD</option>\n                            </Form.Control>\n                        </Form.Group>\n                    </Form.Group>\n                    <Form.Label>Duration</Form.Label>\n                    <Form.Control type=\"text\" name=\"testTime\"\n                                  onChange={(e) =>\n                                      setDuration(e.target.value)}/>\n                </Form>\n                <Button variant=\"primary\"\n                        onClick={() => handleSubmit()}>\n                    Submit\n                </Button>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default CreateTestInit;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Test.js",["238","239","240","241","242","243","244","245","246","247"],"import React, {useEffect, useState} from 'react';\nimport UserService from \"../services/user.service\";\nimport axios from \"axios\";\nimport authHeader from \"../services/auth-header\";\nimport QuestionCard from \"./QuestionCard\";\nimport {Button} from \"react-bootstrap\";\nimport equals from \"validator/es/lib/equals\";\nimport CompleteTest from \"./CompleteTest\";\nimport Header from \"./Header\";\nimport Timer from \"./Timer\";\n\nconst Test = (props) => {\n\n    const [checkedAnswers, setCheckedAnswers] = useState(new Set());\n\n    const [results, setResults] = useState([]);\n\n    const [completed, setCompleted] = useState(false);\n    const [submitted, setSubmitted] = useState(false);\n\n    const [score, setScore] = useState(-20);\n\n    const [test, setTest] = useState({\n        title: \"\",\n        subject: \"\",\n        difficulty: \"\",\n        questions: []\n    });\n\n    // const receiveResult = (value) => {\n    //     console.log(value);\n    // }\n\n    const handleChangeInCard = (questionId, e, correctAnswer) => {\n        console.log(\"Parent\", questionId + \" : \" + e.target.id + \", correct =\", correctAnswer);\n        const ansObj = {\n            questionId: questionId,\n            chosenAnswerId: e.target.id,\n            correctAnswerId: correctAnswer\n        }\n\n        const duplicateIndex = results.findIndex(obj => obj.questionId == ansObj.questionId);\n        console.log(\"duplicateIndex\", duplicateIndex);\n        if (duplicateIndex >= 0) {\n            setResults(prev => {\n                const newArray = prev.slice(0, duplicateIndex)\n                    .concat(prev.slice(duplicateIndex + 1));\n                console.log(\"Cutted array\", newArray);\n                return [...newArray, ansObj];\n            })\n        } else {\n            setResults(prev => [...prev, ansObj]);\n        }\n\n\n    }\n\n    useEffect(() => {\n        if (submitted) {\n            while (score < 0) {\n                console.log(\"Here\")\n                setScore(percentage);\n                console.log(\"score submitted\", score)\n            }\n        }\n    }, [submitted])\n\n    let scoreTemp = 0;\n    let percentage = -20;\n\n    const handleSubmitTest = () => {\n\n        setSubmitted(true);\n\n        results.map(ansObj => {\n            if (ansObj.chosenAnswerId == ansObj.correctAnswerId) {\n                scoreTemp++;\n            }\n        });\n\n        setCompleted(true);\n\n        // console.log(\"ScoreTemp = \", scoreTemp);\n        // console.log(\"ScoreTemp %%% = \", scoreTemp / results.length * 100);\n\n\n        percentage = scoreTemp / results.length * 100;\n        setScore(scoreTemp / results.length * 100);\n\n        // console.log(\"percentage = \", percentage);\n        // console.log(\"score\", score);\n    }\n\n    // useEffect(() => {\n    //     if (percentage > 0) {\n    //         setScore(percentage);\n    //         console.log(\"perc = \", percentage);\n    //     } else {\n    //         console.log(\"else\", score);\n    //     }\n    // }, [submitted, completed, score]);\n\n    useEffect(() => {\n        UserService.getTest(props.match.params.id, props.match.params.testId).then(\n            resp => {\n                console.log(resp.data);\n                setTest({\n                    title: resp.data.title,\n                    subject: resp.data.subject,\n                    difficulty: resp.data.difficulty,\n                    questions: resp.data.questions\n                });\n            }\n        );\n\n    }, [])\n\n    let count = 0;\n\n    return (\n        <div>\n            {completed &&\n            <Header/>\n            }\n            <div>TEST</div>\n            <div>{test.title}</div>\n            {!completed &&\n            test.questions.map(question => {\n                count++;\n                return (\n                    <QuestionCard props={{\n                        questionId: question.id,\n                        numberOfQuestion: count,\n                        questionText: question.questionText,\n                        answers: question.answers,\n                        handleChangeInCard: handleChangeInCard\n                    }}/>);\n            })}\n            {/*{!completed &&*/}\n            <Button onClick={handleSubmitTest}>Submit</Button>\n            {/*}*/}\n            {score > 0 &&\n            <CompleteTest props={score}/>\n            }\n            <div style={{\n                position: \"absolute\",\n                left: \"0\",\n                bottom: \"0\",\n                right: \"0\"\n            }}>\n                {!submitted &&\n                <Timer\n                    time={15}\n                    props={props}\n                />}\n            </div>\n        </div>\n    );\n\n};\n\nexport default Test;\n\n","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/QuestionCard.js",["248","249","250","251","252","253","254","255","256"],"import React, {useState} from \"react\";\nimport {Button, Form, Card, FormControl, InputGroup, ListGroup} from \"react-bootstrap\";\n\nconst QuestionCard = ({props}) => {\n\n    const [chosenAnswerId, setChosenAnswerId] = useState(0);\n\n    const handleSubmitQuestion = () => {\n        console.log(props.answers.find(answer => answer.correct).id == chosenAnswerId);\n    }\n\n    const handleSubmitTest = () => {\n        console.log(props.answers.find(answer => answer.correct).id == chosenAnswerId);\n    }\n\n    const handleChange = (e) => {\n        setChosenAnswerId(e.target.id);\n        console.log(e.target.id);\n    }\n\n    return (\n        <div>\n            <Card>\n                <Card.Header>\n                    {props.numberOfQuestion}\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>{props.questionText}</Card.Title>\n                    {/*<Card.Title>title</Card.Title>*/}\n                    <Card.Body>\n                        <Form>\n                            <Form.Group>\n                                {props.answers.map(answer => {\n                                    return (\n                                        <div key={answer.id}>\n                                            <Form.Check\n                                                type=\"radio\"\n                                                label={answer.answerText}\n                                                name=\"1\"\n                                                id={answer.id}\n                                                onChange={(e) =>\n                                                    props.handleChangeInCard(props.questionId, e,\n                                                        props.answers.find(answer => answer.correct).id)}\n                                            />\n                                        </div>\n                                    );\n                                })}\n                            </Form.Group>\n                            {/*<Form.Control.Feedback type=\"valid\">You did it!</Form.Control.Feedback>*/}\n                        </Form>\n                    </Card.Body>\n                </Card.Body>\n            </Card>\n            {/*<Button onClick={() => props.handleSubmit}>Submit question</Button>*/}\n        </div>\n    );\n\n};\n\nexport default QuestionCard;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CreateTest.js",["257","258","259"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CreateTestQuestionCard.js",["260","261","262","263","264","265","266","267"],"import React, {forwardRef, useEffect, useImperativeHandle, useRef, useState} from \"react\";\nimport AdminService from \"../services/admin.service\";\nimport {\n    ToggleButton,\n    Col,\n    Row,\n    Button,\n    ButtonGroup,\n    ListGroup,\n    Card,\n    Form,\n    InputGroup,\n    FormControl\n} from \"react-bootstrap\";\n\nconst CreateTestQuestionCard = (props) => {\n\n    const [numberOfAnswers, setNumberOfAnswers] = useState([]);\n    const [counter, setCounter] = useState(0);\n    const [answers, setAnswers] = useState([]);\n    const [questionText, setQuestionText] = useState(\"\");\n    const [correctAnswer, setCorrectAnswer] = useState(\"\");\n    const [submit, setSubmit] = useState(false);\n    const [nextOrFinish, setNextOrFinish] = useState(false);\n    const [initial, setInitial] = useState(true);\n\n    let counterTemp = 0;\n\n\n    const childRef = useRef();\n\n    useEffect(() => {\n        if (initial) {\n            setNumberOfAnswers([<NewAnswer/>]);\n            setInitial(false);\n        }\n    }, [initial])\n\n    useEffect(() => {\n        console.log(\"submit = \", submit);\n    }, [submit])\n\n    useEffect(() => {\n        if (submit) {\n            algo();\n            setSubmit(false);\n            console.log(answers);\n\n        }\n    }, [answers, submit])\n\n    const handleAddNew = () => {\n        setNumberOfAnswers(prevState => [...prevState, <NewAnswer ref={childRef}/>]);\n    };\n\n\n    const algo = () => {\n        childRef.current.submitOnChild();\n    }\n\n    const handleSubmit = () => {\n        setSubmit(true);\n        setNextOrFinish(true);\n    };\n\n    const NewAnswer = forwardRef((props, ref) => {\n\n        const [answer, setAnswer] = useState(\"\");\n        const [disabled, setDisabled] = useState(false);\n\n        useImperativeHandle(ref, () => ({\n            submitOnChild() {\n                counterTemp++;\n                setDisabled(true);\n                setAnswers(prev => [...prev, answer]);\n            }\n        }));\n\n\n        const handleAddNewChild = () => {\n            setCounter(counter => counter + 1);\n            counterTemp++;\n            console.log(\"counterTemp\", counterTemp);\n            setDisabled(true);\n            setAnswers(prev => [...prev, answer]);\n            handleAddNew();\n        };\n\n        const handleSubmitChild = () => {\n            setDisabled(true);\n            setAnswers(prev => [...prev, answer]);\n        };\n\n        const handleChange = (e) => {\n            setAnswer(e.target.value);\n        }\n\n        return (\n            <div>\n                <Row style={{margin: \"20px\"}}>\n                    <Col xs={1}>\n                        <Form.Check\n                            type=\"radio\"\n                            // label={answer.answerText}\n                            name=\"answerRadioButtons\"\n                            id={counterTemp}\n                            onChange={(e) => {\n                                console.log(e.target.id);\n                                setCorrectAnswer(e.target.id);\n                            }}\n                        />\n                    </Col>\n                    <Col xs={9}>\n                        <Form.Control placeholder=\"Enter answer\"\n                                      onChange={(e) => {\n                                          handleChange(e);\n                                      }}\n                                      disabled={disabled}\n                        />\n                    </Col>\n                    <Col>\n                        <Button\n                            onClick={() => handleAddNewChild()}\n                        >Add new</Button>\n                    </Col>\n                </Row>\n            </div>\n        );\n    })\n\n    const postQuestion = () => {\n\n        for (let i = 0; i < answers.length; i++) {\n            answersToSend[i] = {\n                answerText: answers[i],\n                correct: false\n            }\n            if (i == correctAnswer - 1) {\n                answersToSend[i].correct = true;\n            }\n        }\n\n        console.log(props.testId, questionText, answersToSend);\n\n        const question = {\n            testId: props.testId,\n            questionText: questionText,\n            answers: answersToSend,\n        };\n\n        AdminService.postQuestion(question).then(\n            resp => {\n                console.log(resp.data);\n            }\n        );\n        return Promise.resolve();\n    }\n\n    let answersToSend = [{\n        answerText: \"\",\n        correct: false\n    }];\n\n    const handleNext = () => {\n        postQuestion();\n        console.log(\"NEXT = \" + answers + \", \" + questionText + \", correct = \" + correctAnswer, \"answers=\", answersToSend);\n        // postQuestion();\n        // props.history.push('/admin');\n        window.location.reload();\n\n    }\n\n    const handleChangeQuestionText = (e) => {\n        setQuestionText(e.target.value);\n    }\n\n    return (\n        <Card>\n            <Card.Header>\n                <Form.Control placeholder=\"Enter question\"\n                              onChange={(e) => handleChangeQuestionText(e)}/>\n            </Card.Header>\n            {/*<ListGroup variant=\"flush\">*/}\n            <Card.Body>\n                <Form>\n                    {numberOfAnswers.map(answer =>\n                        <div>{answer}</div>\n                    )}\n                </Form>\n            </Card.Body>\n            {!nextOrFinish &&\n            <Button\n                onClick={(e) => handleSubmit(e)}\n            >Submit</Button>}\n            {nextOrFinish &&\n            <div>\n                <Button onClick={() => handleNext()}>Next</Button>\n                <Button onClick={() => {\n                    postQuestion().then(() => {\n                            props.history.push('/admin/tests');\n                            window.location.reload();\n                        }\n                    );\n\n                }}>Finish</Button>\n            </div>}\n        </Card>\n    );\n\n};\n\nexport default CreateTestQuestionCard;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/test.js",["268"],"import {GET_ALL_USERS_FAIL, GET_AVAILABLE_TESTS_SUCCESS} from \"../actions/types\";\n\n\nconst initialState = {\n    tests: []\n}\n\n\nexport default function (state = initialState, action) {\n    const {type, payload} = action;\n\n    switch (type) {\n        case GET_AVAILABLE_TESTS_SUCCESS:\n            return {\n                ...state,\n                tests: payload\n            }\n        case GET_ALL_USERS_FAIL:\n            return {\n                ...state\n            };\n        default:\n            return state;\n    }\n}","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Header.js",["269","270","271","272"],"import React, {useEffect, useState} from \"react\";\nimport {\n    Nav,\n    NavDropdown,\n    Button, Form,\n    FormControl,\n    Navbar\n} from \"react-bootstrap\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logout} from \"../redux/actions/auth\";\nimport LangService from \"../services/lang.service\";\n\n\nconst Header = (props) => {\n\n    const {user: currentUser} = useSelector((state) => state.auth);\n\n    // const [langTemp, setLangTemp] = useState(\"\");\n\n    const lang = localStorage.getItem('lang');\n\n    const [content, setContent] = useState({\n        home: \"\",\n        profile: \"\",\n        users: \"\",\n        tests: \"\",\n        allTests: \"\",\n        createTest: \"\",\n        user: \"\",\n        logout: \"\",\n        lang: \"\",\n        login: \"\",\n        signup: \"\",\n        passedTests: \"\",\n        requiredTests: \"\"\n    });\n\n    // useEffect(() => {\n    //     getContentLang(lang);\n    //     console.log(\"Here\")\n    // }, [langTemp]);\n\n    useEffect(() => {\n        getContentLang(lang);\n        console.log(\"Initial effect\");\n    }, []);\n\n    const getContentLang = (lang) => {\n        LangService.getContentHeader(lang).then(\n            resp => {\n                setContent({\n                    home: resp.data.home,\n                    profile: resp.data.profile,\n                    users: resp.data.users,\n                    tests: resp.data.tests,\n                    allTests: resp.data.allTests,\n                    createTest: resp.data.createTest,\n                    user: resp.data.user,\n                    logout: resp.data.logout,\n                    lang: resp.data.lang,\n                    login: resp.data.login,\n                    signup: resp.data.signup,\n                    passedTests: resp.data.passedTests,\n                    requiredTests: resp.data.requiredTests\n                });\n            }\n        );\n    };\n\n    const dispatch = useDispatch();\n\n    const logOut = () => {\n        dispatch(logout());\n    };\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/home\">{content.home}</Nav.Link>\n                    {currentUser && currentUser.roles.includes(\"ROLE_ADMIN\") &&\n                    <Nav.Link href=\"/admin/users\">{content.users}</Nav.Link>}\n                    {currentUser && currentUser.roles.includes(\"ROLE_ADMIN\") &&\n                    <NavDropdown title={content.tests} id=\"tests-dropdown\">\n                        <NavDropdown.Item href=\"/admin/tests\">{content.allTests}</NavDropdown.Item>\n                        <NavDropdown.Item href=\"/admin/createTest\">{content.createTest}</NavDropdown.Item>\n                    </NavDropdown>\n                    }\n                    {currentUser && !currentUser.roles.includes(\"ROLE_ADMIN\") &&\n                    <NavDropdown title={content.tests} id=\"tests-dropdown\">\n                        <NavDropdown.Item\n                            href={\"/user/\" + currentUser.id + \"/passedTests\"}>{content.passedTests}</NavDropdown.Item>\n                        <NavDropdown.Item\n                            href={\"/user/\" + currentUser.id + \"/requiredTests\"}>{content.requiredTests}</NavDropdown.Item>\n                    </NavDropdown>}\n                    {currentUser && <Nav.Link href=\"/profile\">{content.profile}</Nav.Link>}\n                    {currentUser && <Nav.Link href=\"/home\" onClick={logOut}>{content.logout}</Nav.Link>}\n                    {!currentUser && <Nav.Link href=\"/login\">{content.login}</Nav.Link>}\n                    {!currentUser && <Nav.Link href=\"/signup\">{content.signup}</Nav.Link>}\n                </Nav>\n                <NavDropdown title={content.lang} id=\"basic-nav-dropdown\">\n                    <NavDropdown.Item onClick={() => {\n                        getContentLang(\"en\");\n                        localStorage.setItem(\"lang\", \"en\");\n                        // props.setLang(\"en\");\n                        window.location.reload();\n                    }}>EN</NavDropdown.Item>\n                    <NavDropdown.Item onClick={() => {\n                        getContentLang(\"ua\");\n                        localStorage.setItem(\"lang\", \"ua\");\n                        // props.setLang(\"ua\");\n                        window.location.reload();\n                    }}>UA</NavDropdown.Item>\n                </NavDropdown>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\nexport default Header;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/auth.js",[],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/index.js",["273"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/reducers/message.js",["274"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/redux/actions/test.js",[],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/test.service.js",["275"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/services/lang.service.js",["276","277","278"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Profile.js",[],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/CompleteTest.js",["279"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/Timer.js",["280","281","282","283","284","285"],"import React, {useEffect, useState} from \"react\";\nimport {ListGroup, Navbar, Form, Col, ProgressBar} from \"react-bootstrap\";\n\nconst Timer = (props) => {\n\n        const [seconds, setSeconds] = useState(0);\n        const [minutes, setMinutes] = useState(0);\n\n        const [secondsToShow, setSecondsToShow] = useState(0);\n\n        const [progress, setProgress] = useState(0);\n\n        const [over, setOver] = useState(false);\n\n        const time = props.time;\n\n        useEffect(() => {\n            setSeconds(time);\n        }, []);\n\n        useEffect(() => {\n            setProgress((time - seconds) / time * 100);\n            if (seconds >= 0) {\n                const t = setTimeout(() => {\n                    setSeconds(seconds => seconds - 1);\n                    showTime(seconds);\n                }, 1000);\n                return () => {\n                    clearTimeout(t);\n                };\n            } else {\n                setOver(true);\n            };\n\n\n        }, [seconds])\n\n        useEffect(() => {\n            if (over) {\n                window.alert(\"Time is up\");\n                console.log(props);\n                props.props.history.push('/home');\n                window.location.reload();\n            }\n        }, [over])\n\n        const showTime = (seconds) => {\n            let minutesTemp = 0;\n            setMinutes(0);\n            if (seconds >= 60) {\n                minutesTemp = Math.floor(seconds / 60);\n                setMinutes(minutesTemp);\n            }\n            setSecondsToShow(seconds - minutesTemp * 60);\n        }\n\n        return (\n            <div>\n                {/*<div>{seconds}</div>*/}\n                <ListGroup horizontal>\n                    <ListGroup.Item>{minutes}</ListGroup.Item>\n                    <ListGroup.Item>{secondsToShow}</ListGroup.Item>\n                </ListGroup>\n                <ProgressBar now={progress}/>\n            </div>\n        );\n\n    }\n;\n\nexport default Timer;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/AdminUsers.js",["286","287"],"/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/AddTestsToUser.js",["288","289"],"import React, {useEffect, useState} from \"react\";\nimport AdminService from \"../services/admin.service\";\nimport {Jumbotron, Button, Table} from \"react-bootstrap\";\nimport Header from \"./Header\";\n\nconst AddTestsToUser = (props) => {\n\n    const [tests, setTests] = useState([]);\n\n    const [added, setAdded] = useState(false);\n\n    useEffect(() => {\n        getTests();\n    }, []);\n\n    useEffect(()=>{\n        getTests();\n    },[added]);\n\n    const getTests = () => {\n        AdminService.getAvailableTests(props.match.params.id).then(\n            resp => {\n                console.log(resp.data);\n                setTests(resp.data)\n            });\n        setAdded(false);\n    };\n\n    const handleAddOneTest = (e, testId) => {\n        AdminService.addOneTestToUser(props.match.params.id, testId);\n        setAdded(true)\n        getTests();\n    }\n\n    return (\n        <div>\n            <Header/>\n            <Jumbotron>\n                <Table>\n                    <tbody>\n                    {tests.map(test => (\n                            <tr>\n                                <td>{test.title}</td>\n                                <td>{test.subject}</td>\n                                <td>{test.difficulty}</td>\n                                <td>{test.duration}</td>\n                                <td>\n                                    <Button type=\"submit\" onClick={(e) => handleAddOneTest(e, test.id)}>ADD</Button>\n                                </td>\n                            </tr>\n                        )\n                    )}\n                    </tbody>\n                </Table>\n            </Jumbotron>\n        </div>\n    );\n\n};\n\nexport default AddTestsToUser;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/EditUser.js",["290"],"import React, {useEffect, useState} from \"react\";\nimport Header from \"./Header\";\nimport {Button, Jumbotron, Form} from \"react-bootstrap\";\nimport AdminService from \"../services/admin.service\";\n\nconst EditUser = (props) => {\n\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [user, setUser] = useState({\n        firstName: \"\",\n        lastName: \"\"\n    });\n\n    useEffect(() => {\n        getUser();\n    }, []);\n\n    useEffect(() => {\n        setFirstName(user.firstName);\n        setLastName(user.lastName);\n    }, [user]);\n\n\n    const getUser = () => {\n        AdminService.getUser(props.match.params.id).then(\n            resp => {\n                setUser({\n                    firstName: resp.data.firstName,\n                    lastName: resp.data.lastName\n                });\n            }\n        );\n    }\n\n    return (\n        <div>\n            <Header/>\n            <Jumbotron>\n                <Form>\n                    <Form.Group controlId=\"formFirstName\">\n                        <Form.Label>First Name</Form.Label>\n                        <Form.Control type=\"text\" name=\"firstName\"\n                                      onChange={(e) => {\n                                          setFirstName(e.target.value);\n                                      }}\n                                      value={firstName}\n                            // isInvalid={!!firstNameError}\n                        />\n                        {/*{firstNameError && (*/}\n                        {/*    <Form.Control.Feedback type=\"invalid\">*/}\n                        {/*        {firstNameError}*/}\n                        {/*    </Form.Control.Feedback>*/}\n                        {/*)}*/}\n                    </Form.Group>\n\n                    <Form.Group controlId=\"formLastName\">\n                        <Form.Label>Last Name</Form.Label>\n                        <Form.Control type=\"text\" name=\"lastName\"\n                                      onChange={(e) => {\n                                          setLastName(e.target.value);\n                                      }}\n                                      value={lastName}\n                            // isInvalid={!!lastNameError}\n                        />\n                        {/*{lastNameError && (*/}\n                        {/*    <Form.Control.Feedback type=\"invalid\">*/}\n                        {/*        {lastNameError}*/}\n                        {/*    </Form.Control.Feedback>*/}\n                        {/*)}*/}\n                    </Form.Group>\n\n                    <Button variant=\"primary\"\n                            onClick={() => {\n                                user.firstName = firstName;\n                                user.lastName = lastName;\n                                AdminService.updateUser(props.match.params.id, user);\n                                props.history.push('/admin/users');\n                                window.location.reload();\n                            }}>\n                        Edit\n                    </Button>\n                </Form>\n            </Jumbotron>\n        </div>\n    );\n\n};\n\nexport default EditUser;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/AdminTests.js",["291"],"import React, {useEffect, useState} from \"react\";\nimport Header from \"./Header\";\nimport {Dropdown, Jumbotron, Table} from \"react-bootstrap\";\nimport TestService from \"../services/test.service\";\nimport Test from \"./Test\";\n\nconst AdminTests = () => {\n\n    const [tests, setTests] = useState([]);\n\n    const [deleted, setDeleted] = useState(false);\n\n    useEffect(() => {\n        getTests();\n    }, []);\n\n    useEffect(() => {\n        getTests();\n        setDeleted(false);\n    }, [deleted])\n\n    const getTests = () => {\n        TestService.getTests().then(\n            resp => {\n                console.log(resp.data);\n                setTests(resp.data);\n            }\n        )\n    };\n\n    const TableColumnsTests = () => {\n        return (\n            tests.map(test =>\n                <tbody key={test.id}>\n                <tr>\n                    <td>{test.id}</td>\n                    <td>{test.title}</td>\n                    <td>{test.subject}</td>\n                    <td>{test.difficulty}</td>\n                    <td>{test.duration}</td>\n                    <td>\n                        <Dropdown>\n                            <Dropdown.Toggle>\n                                More\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                <Dropdown.Item\n                                    // onClick={() => {\n                                    //     props.history.push('/admin/editUser/' + user.id);\n                                    //     window.location.reload();\n                                    // }}\n                                >Edit</Dropdown.Item>\n                                <Dropdown.Item\n                                    onClick={() => {\n                                        TestService.deleteTest(test.id).then(\n                                            () => setDeleted[true]);\n                                    }}\n                                >Delete</Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </td>\n                </tr>\n                </tbody>));\n    };\n\n    return (\n        <div>\n            <Header/>\n            <Jumbotron>\n                <div className=\"container\">\n                    <Table striped bordered>\n                        <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Title</th>\n                            <th>Subject</th>\n                            <th>Difficulty</th>\n                            <th>Duration</th>\n                        </tr>\n                        </thead>\n                        <TableColumnsTests/>\n                    </Table>\n                </div>\n            </Jumbotron>\n        </div>\n    );\n\n};\n\nexport default AdminTests;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/UserPassedTests.js",["292","293","294","295","296"],"import React, {useEffect, useState} from \"react\";\nimport Header from \"./Header\";\nimport {Button, Jumbotron, Table} from \"react-bootstrap\";\nimport LangService from \"../services/lang.service\";\nimport {useSelector} from \"react-redux\";\nimport UserService from \"../services/user.service\";\n\nconst UserPassedTests = (props) => {\n\n    const lang = localStorage.getItem('lang');\n\n    const [needRefresh, setNeedRefresh] = useState(false);\n    const [passedTests, setPassedTests] = useState([]);\n    const [content, setContent] = useState({\n        passedTests: \"\",\n    });\n\n    useEffect(() => {\n        UserService.getPassedTests(props.match.params.id).then(\n            (response) => {\n                setPassedTests(response.data);\n            });\n        getContent();\n    }, []);\n\n    useEffect(() => {\n        getContent(lang);\n    }, [lang])\n\n    useEffect(() => {\n        UserService.getPassedTests(props.match.params.id).then(\n            (response) => {\n                setPassedTests(response.data);\n            });\n        // setNeedRefresh(false);\n    }, [needRefresh]);\n\n    const getContent = (lang) => {\n        LangService.getContentUserPassedTests(lang).then(\n            resp => {\n                setContent({\n                    passedTests: resp.data.passedTests,\n                });\n            });\n    };\n\n\n    return (\n        <div>\n            <Header/>\n            <Jumbotron>\n                <h1>{content.passedTests}</h1>\n                <Table>\n                    <thead>\n                    <tr>\n                        <th>Title</th>\n                        <th>Result</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {passedTests.map(test =>\n                        <tr>\n                            <td>\n                                <div>{test.title}</div>\n                                <div>{test.result}</div>\n                            </td>\n                        </tr>\n                    )}\n                    </tbody>\n                </Table>\n            </Jumbotron>\n        </div>\n    );\n\n};\n\nexport default UserPassedTests;","/Users/kampuxter/Desktop/EPAM/JAVA/Project/SpringProject/project-front/src/component/UserRequiredTests.js",["297","298","299","300","301","302","303"],{"ruleId":"304","severity":1,"message":"305","line":31,"column":1,"nodeType":"306","endLine":35,"endColumn":2},{"ruleId":"304","severity":1,"message":"305","line":64,"column":1,"nodeType":"306","endLine":76,"endColumn":3},{"ruleId":"304","severity":1,"message":"305","line":30,"column":1,"nodeType":"306","endLine":37,"endColumn":2},{"ruleId":"307","severity":1,"message":"308","line":5,"column":17,"nodeType":"309","messageId":"310","endLine":5,"endColumn":22},{"ruleId":"307","severity":1,"message":"311","line":7,"column":8,"nodeType":"309","messageId":"310","endLine":7,"endColumn":19},{"ruleId":"307","severity":1,"message":"312","line":13,"column":21,"nodeType":"309","messageId":"310","endLine":13,"endColumn":31},{"ruleId":"307","severity":1,"message":"313","line":25,"column":11,"nodeType":"309","messageId":"310","endLine":25,"endColumn":15},{"ruleId":"314","severity":1,"message":"315","line":42,"column":8,"nodeType":"316","endLine":42,"endColumn":10,"suggestions":"317"},{"ruleId":"314","severity":1,"message":"315","line":70,"column":8,"nodeType":"316","endLine":70,"endColumn":21,"suggestions":"318"},{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"319","replacedBy":"323"},{"ruleId":"321","replacedBy":"324"},{"ruleId":"307","severity":1,"message":"325","line":4,"column":8,"nodeType":"309","messageId":"310","endLine":4,"endColumn":13},{"ruleId":"307","severity":1,"message":"313","line":10,"column":11,"nodeType":"309","messageId":"310","endLine":10,"endColumn":15},{"ruleId":"314","severity":1,"message":"326","line":28,"column":8,"nodeType":"316","endLine":28,"endColumn":10,"suggestions":"327"},{"ruleId":"307","severity":1,"message":"328","line":6,"column":9,"nodeType":"309","messageId":"310","endLine":6,"endColumn":19},{"ruleId":"307","severity":1,"message":"329","line":24,"column":12,"nodeType":"309","messageId":"310","endLine":24,"endColumn":23},{"ruleId":"307","severity":1,"message":"330","line":24,"column":25,"nodeType":"309","messageId":"310","endLine":24,"endColumn":37},{"ruleId":"319","replacedBy":"331"},{"ruleId":"321","replacedBy":"332"},{"ruleId":"319","replacedBy":"333"},{"ruleId":"321","replacedBy":"334"},{"ruleId":"319","replacedBy":"335"},{"ruleId":"321","replacedBy":"336"},{"ruleId":"304","severity":1,"message":"337","line":7,"column":1,"nodeType":"306","endLine":27,"endColumn":2},{"ruleId":"307","severity":1,"message":"338","line":1,"column":16,"nodeType":"309","messageId":"310","endLine":1,"endColumn":22},{"ruleId":"307","severity":1,"message":"339","line":3,"column":9,"nodeType":"309","messageId":"310","endLine":3,"endColumn":17},{"ruleId":"307","severity":1,"message":"340","line":11,"column":12,"nodeType":"309","messageId":"310","endLine":11,"endColumn":19},{"ruleId":"307","severity":1,"message":"341","line":13,"column":12,"nodeType":"309","messageId":"310","endLine":13,"endColumn":22},{"ruleId":"307","severity":1,"message":"342","line":14,"column":12,"nodeType":"309","messageId":"310","endLine":14,"endColumn":19},{"ruleId":"319","replacedBy":"343"},{"ruleId":"321","replacedBy":"344"},{"ruleId":"307","severity":1,"message":"345","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":14},{"ruleId":"307","severity":1,"message":"346","line":5,"column":32,"nodeType":"309","messageId":"310","endLine":5,"endColumn":45},{"ruleId":"307","severity":1,"message":"347","line":10,"column":8,"nodeType":"309","messageId":"310","endLine":10,"endColumn":17},{"ruleId":"307","severity":1,"message":"348","line":12,"column":9,"nodeType":"309","messageId":"310","endLine":12,"endColumn":15},{"ruleId":"307","severity":1,"message":"349","line":26,"column":12,"nodeType":"309","messageId":"310","endLine":26,"endColumn":26},{"ruleId":"307","severity":1,"message":"350","line":43,"column":18,"nodeType":"309","messageId":"310","endLine":43,"endColumn":25},{"ruleId":"307","severity":1,"message":"351","line":6,"column":12,"nodeType":"309","messageId":"310","endLine":6,"endColumn":26},{"ruleId":"314","severity":1,"message":"352","line":11,"column":8,"nodeType":"316","endLine":11,"endColumn":10,"suggestions":"353"},{"ruleId":"307","severity":1,"message":"354","line":4,"column":28,"nodeType":"309","messageId":"310","endLine":4,"endColumn":52},{"ruleId":"307","severity":1,"message":"355","line":5,"column":5,"nodeType":"309","messageId":"310","endLine":5,"endColumn":32},{"ruleId":"314","severity":1,"message":"356","line":11,"column":5,"nodeType":"309","endLine":11,"endColumn":14,"suggestions":"357"},{"ruleId":"307","severity":1,"message":"358","line":24,"column":23,"nodeType":"309","messageId":"310","endLine":24,"endColumn":31},{"ruleId":"304","severity":1,"message":"337","line":15,"column":1,"nodeType":"306","endLine":50,"endColumn":2},{"ruleId":"307","severity":1,"message":"359","line":5,"column":9,"nodeType":"309","messageId":"310","endLine":5,"endColumn":20},{"ruleId":"307","severity":1,"message":"360","line":3,"column":8,"nodeType":"309","messageId":"310","endLine":3,"endColumn":13},{"ruleId":"307","severity":1,"message":"361","line":4,"column":8,"nodeType":"309","messageId":"310","endLine":4,"endColumn":18},{"ruleId":"307","severity":1,"message":"362","line":7,"column":8,"nodeType":"309","messageId":"310","endLine":7,"endColumn":14},{"ruleId":"307","severity":1,"message":"363","line":14,"column":12,"nodeType":"309","messageId":"310","endLine":14,"endColumn":26},{"ruleId":"307","severity":1,"message":"364","line":14,"column":28,"nodeType":"309","messageId":"310","endLine":14,"endColumn":45},{"ruleId":"365","severity":1,"message":"366","line":42,"column":72,"nodeType":"367","messageId":"368","endLine":42,"endColumn":74},{"ruleId":"314","severity":1,"message":"369","line":66,"column":8,"nodeType":"316","endLine":66,"endColumn":19,"suggestions":"370"},{"ruleId":"371","severity":1,"message":"372","line":75,"column":28,"nodeType":"373","messageId":"374","endLine":75,"endColumn":30},{"ruleId":"365","severity":1,"message":"366","line":76,"column":39,"nodeType":"367","messageId":"368","endLine":76,"endColumn":41},{"ruleId":"314","severity":1,"message":"375","line":116,"column":8,"nodeType":"316","endLine":116,"endColumn":10,"suggestions":"376"},{"ruleId":"307","severity":1,"message":"377","line":2,"column":9,"nodeType":"309","messageId":"310","endLine":2,"endColumn":15},{"ruleId":"307","severity":1,"message":"378","line":2,"column":29,"nodeType":"309","messageId":"310","endLine":2,"endColumn":40},{"ruleId":"307","severity":1,"message":"379","line":2,"column":42,"nodeType":"309","messageId":"310","endLine":2,"endColumn":52},{"ruleId":"307","severity":1,"message":"380","line":2,"column":54,"nodeType":"309","messageId":"310","endLine":2,"endColumn":63},{"ruleId":"307","severity":1,"message":"381","line":8,"column":11,"nodeType":"309","messageId":"310","endLine":8,"endColumn":31},{"ruleId":"365","severity":1,"message":"366","line":9,"column":69,"nodeType":"367","messageId":"368","endLine":9,"endColumn":71},{"ruleId":"307","severity":1,"message":"382","line":12,"column":11,"nodeType":"309","messageId":"310","endLine":12,"endColumn":27},{"ruleId":"365","severity":1,"message":"366","line":13,"column":69,"nodeType":"367","messageId":"368","endLine":13,"endColumn":71},{"ruleId":"307","severity":1,"message":"383","line":16,"column":11,"nodeType":"309","messageId":"310","endLine":16,"endColumn":23},{"ruleId":"307","severity":1,"message":"384","line":3,"column":20,"nodeType":"309","messageId":"310","endLine":3,"endColumn":24},{"ruleId":"307","severity":1,"message":"385","line":3,"column":26,"nodeType":"309","messageId":"310","endLine":3,"endColumn":30},{"ruleId":"314","severity":1,"message":"386","line":29,"column":8,"nodeType":"316","endLine":29,"endColumn":10,"suggestions":"387"},{"ruleId":"307","severity":1,"message":"388","line":4,"column":5,"nodeType":"309","messageId":"310","endLine":4,"endColumn":17},{"ruleId":"307","severity":1,"message":"389","line":8,"column":5,"nodeType":"309","messageId":"310","endLine":8,"endColumn":16},{"ruleId":"307","severity":1,"message":"380","line":9,"column":5,"nodeType":"309","messageId":"310","endLine":9,"endColumn":14},{"ruleId":"307","severity":1,"message":"379","line":12,"column":5,"nodeType":"309","messageId":"310","endLine":12,"endColumn":15},{"ruleId":"307","severity":1,"message":"378","line":13,"column":5,"nodeType":"309","messageId":"310","endLine":13,"endColumn":16},{"ruleId":"307","severity":1,"message":"390","line":19,"column":12,"nodeType":"309","messageId":"310","endLine":19,"endColumn":19},{"ruleId":"307","severity":1,"message":"391","line":89,"column":15,"nodeType":"309","messageId":"310","endLine":89,"endColumn":32},{"ruleId":"365","severity":1,"message":"366","line":138,"column":19,"nodeType":"367","messageId":"368","endLine":138,"endColumn":21},{"ruleId":"304","severity":1,"message":"337","line":9,"column":1,"nodeType":"306","endLine":25,"endColumn":2},{"ruleId":"307","severity":1,"message":"377","line":5,"column":5,"nodeType":"309","messageId":"310","endLine":5,"endColumn":11},{"ruleId":"307","severity":1,"message":"385","line":5,"column":13,"nodeType":"309","messageId":"310","endLine":5,"endColumn":17},{"ruleId":"307","severity":1,"message":"378","line":6,"column":5,"nodeType":"309","messageId":"310","endLine":6,"endColumn":16},{"ruleId":"314","severity":1,"message":"392","line":46,"column":8,"nodeType":"316","endLine":46,"endColumn":10,"suggestions":"393"},{"ruleId":null,"fatal":true,"severity":2,"message":"394","line":16,"column":5},{"ruleId":"304","severity":1,"message":"337","line":5,"column":1,"nodeType":"306","endLine":16,"endColumn":2},{"ruleId":"304","severity":1,"message":"305","line":18,"column":1,"nodeType":"306","endLine":21,"endColumn":2},{"ruleId":"307","severity":1,"message":"361","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":18},{"ruleId":"307","severity":1,"message":"395","line":6,"column":7,"nodeType":"309","messageId":"310","endLine":6,"endColumn":11},{"ruleId":"304","severity":1,"message":"305","line":27,"column":1,"nodeType":"306","endLine":30,"endColumn":2},{"ruleId":"307","severity":1,"message":"345","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":14},{"ruleId":"307","severity":1,"message":"396","line":2,"column":20,"nodeType":"309","messageId":"310","endLine":2,"endColumn":26},{"ruleId":"307","severity":1,"message":"385","line":2,"column":28,"nodeType":"309","messageId":"310","endLine":2,"endColumn":32},{"ruleId":"307","severity":1,"message":"397","line":2,"column":34,"nodeType":"309","messageId":"310","endLine":2,"endColumn":37},{"ruleId":"314","severity":1,"message":"398","line":19,"column":12,"nodeType":"316","endLine":19,"endColumn":14,"suggestions":"399"},{"ruleId":"314","severity":1,"message":"398","line":36,"column":12,"nodeType":"316","endLine":36,"endColumn":21,"suggestions":"400"},{"ruleId":"314","severity":1,"message":"401","line":45,"column":12,"nodeType":"316","endLine":45,"endColumn":18,"suggestions":"402"},{"ruleId":"314","severity":1,"message":"403","line":16,"column":8,"nodeType":"316","endLine":16,"endColumn":10,"suggestions":"404"},{"ruleId":"314","severity":1,"message":"403","line":21,"column":8,"nodeType":"316","endLine":21,"endColumn":17,"suggestions":"405"},{"ruleId":"314","severity":1,"message":"406","line":14,"column":8,"nodeType":"316","endLine":14,"endColumn":10,"suggestions":"407"},{"ruleId":"314","severity":1,"message":"406","line":18,"column":7,"nodeType":"316","endLine":18,"endColumn":14,"suggestions":"408"},{"ruleId":"314","severity":1,"message":"409","line":17,"column":8,"nodeType":"316","endLine":17,"endColumn":10,"suggestions":"410"},{"ruleId":"307","severity":1,"message":"411","line":5,"column":8,"nodeType":"309","messageId":"310","endLine":5,"endColumn":12},{"ruleId":"307","severity":1,"message":"377","line":3,"column":9,"nodeType":"309","messageId":"310","endLine":3,"endColumn":15},{"ruleId":"307","severity":1,"message":"359","line":5,"column":9,"nodeType":"309","messageId":"310","endLine":5,"endColumn":20},{"ruleId":"307","severity":1,"message":"412","line":12,"column":25,"nodeType":"309","messageId":"310","endLine":12,"endColumn":39},{"ruleId":"314","severity":1,"message":"315","line":24,"column":8,"nodeType":"316","endLine":24,"endColumn":10,"suggestions":"413"},{"ruleId":"314","severity":1,"message":"315","line":36,"column":8,"nodeType":"316","endLine":36,"endColumn":21,"suggestions":"414"},{"ruleId":"307","severity":1,"message":"311","line":5,"column":8,"nodeType":"309","messageId":"310","endLine":5,"endColumn":19},{"ruleId":"307","severity":1,"message":"313","line":9,"column":11,"nodeType":"309","messageId":"310","endLine":9,"endColumn":15},{"ruleId":"307","severity":1,"message":"412","line":11,"column":25,"nodeType":"309","messageId":"310","endLine":11,"endColumn":39},{"ruleId":"307","severity":1,"message":"415","line":13,"column":12,"nodeType":"309","messageId":"310","endLine":13,"endColumn":19},{"ruleId":"307","severity":1,"message":"312","line":13,"column":21,"nodeType":"309","messageId":"310","endLine":13,"endColumn":31},{"ruleId":"314","severity":1,"message":"315","line":23,"column":8,"nodeType":"316","endLine":23,"endColumn":10,"suggestions":"416"},{"ruleId":"314","severity":1,"message":"315","line":35,"column":8,"nodeType":"316","endLine":35,"endColumn":21,"suggestions":"417"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'LangService' is defined but never used.","'setContent' is assigned a value but never used.","'lang' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["418"],["419"],"no-native-reassign",["420"],"no-negated-in-lhs",["421"],["420"],["421"],"'Timer' is defined but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["422"],"'setMessage' is defined but never used.","'isValidated' is assigned a value but never used.","'setValidated' is assigned a value but never used.",["420"],["421"],["420"],["421"],["420"],["421"],"Unexpected default export of anonymous function","'useRef' is defined but never used.","'Redirect' is defined but never used.","'loading' is assigned a value but never used.","'isLoggedIn' is assigned a value but never used.","'message' is assigned a value but never used.",["420"],["421"],"'Header' is defined but never used.","'BrowserRouter' is defined but never used.","'BoardUser' is defined but never used.","'logout' is defined but never used.","'showAdminBoard' is assigned a value but never used.","'setLang' is assigned a value but never used.","'createTestShow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.createTestShow'. Either include it or remove the dependency array. If 'setCreateTestShow' needs the current value of 'props.createTestShow', you can also switch to useReducer instead of useState and read 'props.createTestShow' in the reducer.",["423"],"'GET_AVAILABLE_TESTS_FAIL' is defined but never used.","'GET_AVAILABLE_TESTS_SUCCESS' is defined but never used.","React Hook useEffect contains a call to 'setTests'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.tests, props.testsModalShow, props.userToAddTests] as a second argument to the useEffect Hook.",["424"],"'_content' is assigned a value but never used.","'useSelector' is defined but never used.","'axios' is defined but never used.","'authHeader' is defined but never used.","'equals' is defined but never used.","'checkedAnswers' is assigned a value but never used.","'setCheckedAnswers' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'percentage' and 'score'. Either include them or remove the dependency array.",["425"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'props.match.params.id' and 'props.match.params.testId'. Either include them or remove the dependency array.",["426"],"'Button' is defined but never used.","'FormControl' is defined but never used.","'InputGroup' is defined but never used.","'ListGroup' is defined but never used.","'handleSubmitQuestion' is assigned a value but never used.","'handleSubmitTest' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Card' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array. If 'setTestId' needs the current value of 'props.match.params.id', you can also switch to useReducer instead of useState and read 'props.match.params.id' in the reducer.",["427"],"'ToggleButton' is defined but never used.","'ButtonGroup' is defined but never used.","'counter' is assigned a value but never used.","'handleSubmitChild' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'lang'. Either include it or remove the dependency array.",["428"],"Parsing error: Unexpected token, expected \",\"\n\n  14 |         </Provider>,\n  15 |      {/*</React.StrictMode>,*/}\n> 16 |     document.getElementById('root')\n     |     ^\n  17 | );\n  18 | \n  19 | // If you want to start measuring performance in your app, pass a function","'user' is assigned a value but never used.","'Navbar' is defined but never used.","'Col' is defined but never used.","React Hook useEffect has a missing dependency: 'time'. Either include it or remove the dependency array.",["429"],["430"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.",["431"],"React Hook useEffect has a missing dependency: 'param'. Either include it or remove the dependency array.",["432"],["433"],"React Hook useEffect has a missing dependency: 'getTests'. Either include it or remove the dependency array.",["434"],["435"],"React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["436"],"'Test' is defined but never used.","'setNeedRefresh' is assigned a value but never used.",["437"],["438"],"'content' is assigned a value but never used.",["439"],["440"],{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},"no-global-assign","no-unsafe-negation",{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"441","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"441","fix":"474"},{"desc":"443","fix":"475"},{"desc":"441","fix":"476"},{"desc":"443","fix":"477"},"Update the dependencies array to be: [props.match.params.id]",{"range":"478","text":"479"},"Update the dependencies array to be: [needRefresh, props.match.params.id]",{"range":"480","text":"481"},"Update the dependencies array to be: [user]",{"range":"482","text":"483"},"Update the dependencies array to be: [props.createTestShow]",{"range":"484","text":"485"},"Add dependencies array: [props.tests, props.testsModalShow, props.userToAddTests]",{"range":"486","text":"487"},"Update the dependencies array to be: [percentage, score, submitted]",{"range":"488","text":"489"},"Update the dependencies array to be: [props.match.params.id, props.match.params.testId]",{"range":"490","text":"491"},{"range":"492","text":"479"},"Update the dependencies array to be: [lang]",{"range":"493","text":"494"},"Update the dependencies array to be: [time]",{"range":"495","text":"496"},"Update the dependencies array to be: [seconds, time]",{"range":"497","text":"498"},"Update the dependencies array to be: [over, props]",{"range":"499","text":"500"},"Update the dependencies array to be: [param]",{"range":"501","text":"502"},"Update the dependencies array to be: [deleted, param]",{"range":"503","text":"504"},"Update the dependencies array to be: [getTests]",{"range":"505","text":"506"},"Update the dependencies array to be: [added, getTests]",{"range":"507","text":"508"},"Update the dependencies array to be: [getUser]",{"range":"509","text":"510"},{"range":"511","text":"479"},{"range":"512","text":"481"},{"range":"513","text":"479"},{"range":"514","text":"481"},[1212,1214],"[props.match.params.id]",[1959,1972],"[needRefresh, props.match.params.id]",[778,780],"[user]",[325,327],"[props.createTestShow]",[534,534],", [props.tests, props.testsModalShow, props.userToAddTests]",[2033,2044],"[percentage, score, submitted]",[3396,3398],"[props.match.params.id, props.match.params.testId]",[886,888],[1045,1047],"[lang]",[526,528],"[time]",[979,988],"[seconds, time]",[1239,1245],"[over, props]",[427,429],"[param]",[516,525],"[deleted, param]",[373,375],"[getTests]",[425,432],"[added, getTests]",[466,468],"[getUser]",[771,773],[1059,1072],[743,745],[1044,1057]]